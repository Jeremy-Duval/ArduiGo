<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema 
		targetNamespace="http://www.visual-paradigm.com/2008/ReportWriter1.1"
		xmlns:rw="http://www.visual-paradigm.com/2008/ReportWriter1.1"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	
	<!-- ROOT -->
	
	<!-- Template, BaseInitiation-->
	<xsd:element name="Template">
		<xsd:annotation>
			<xsd:documentation>The root element of template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="rw:TemplateInformationHeader"/>
				<xsd:choice>
					<xsd:element ref="rw:ElementBaseInitiationBlock"/>
					<xsd:element ref="rw:DiagramBaseInitiationBlock"/>
					<xsd:element ref="rw:DiagramElementBaseInitiationBlock"/>
					<xsd:element ref="rw:ProjectBaseInitiationBlock"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="TemplateInformationHeader">
		<xsd:annotation>
			<xsd:documentation>Information of this template, includes id, name, etc...</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="id" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The id of this template. It is used on Save/Load the template in report. 
						Please don't change id if this template have been used on any report. Otherwise, report may not able to find this template on loading.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
						The name of the template that showing on template list.
						
						If the 'id' is not specified, this 'name' will be used as 'id'. 
						So, please don't change name if this template have been used on any report. Otherwise, report may not able to find this template on loading.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="description" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="default" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Determine this template is the default template of current folder (modelType/diagramType).
						Assume only one template will be 'default' in one folder.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="icon" use="optional">
				<xsd:annotation>
					<xsd:documentation>Determines showing which icon on the template list.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="diagram"/>
						<xsd:enumeration value="documentation"/>
						<xsd:enumeration value="flow of events"/>
						<xsd:enumeration value="procedures"/>
						<xsd:enumeration value="test plans"/>
						<xsd:enumeration value="grid diagram"/>
						<xsd:enumeration value="matrix diagram"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="type" use="optional" default="text">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @icon</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="text"/>
						<xsd:enumeration value="image"/>
						<xsd:enumeration value="table"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="ElementBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>
				Starts working on Model Element.
				Also can be used to change active source to ModelElement from DiagramElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>Starts working on Diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramElementBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>Starts working on Diagram Element.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ProjectBaseInitiationBlock">
		<xsd:annotation>
			<xsd:documentation>
				Starts working on Project.
				Also can be used to change active source to Project from any Diagram/DiagramElement/ModelElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	
	<!-- CONTENTS -->
	
	<!-- Breaks, Text -->
	<xsd:element name="ParagraphBreak">
		<xsd:annotation>
			<xsd:documentation>Insert a Paragraph Break.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="PageBreak">
		<xsd:annotation>
			<xsd:documentation>Insert a Page Break.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="StaticText">
		<xsd:annotation>
			<xsd:documentation>Insert a hard-code text.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="content" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>The text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Bold' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Italic' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isUnderline" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Underline' text?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isSuperscript" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Superscript' text? (the text will be shown on 'upper level' of the line.)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>'Font' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>'Font Size' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Font Color' of the text.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of the paragraph.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Paragraph Style' of the paragraph.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Numbering Level' of the paragraph. (Its Paragraph Style is required to refer a Numbering Style.)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="indentation" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Left Margin' of the paragraph.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hyperlink" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>The text will be shown as a hyperlink.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- FreeStylePage, FreeStyleHtmlText, FreeStyleImage -->
	<xsd:element name="FreeStylePage">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style Page into Report</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:element minOccurs="0" maxOccurs="unbounded" ref="rw:FreeStyleHtmlText"/>
				<xsd:element minOccurs="0" maxOccurs="unbounded" ref="rw:FreeStyleImage"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="FreeStyleHtmlText">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style HTML text into Free Style Page</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
							Content of this FreeStyleHtmlText. It is in HTML Format.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:attribute name="x" type="rw:measureUnit" use="required">
						<xsd:annotation>
							<xsd:documentation>x-location of this FreeStyleHtmlText</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="y" type="rw:measureUnit" use="required">
						<xsd:annotation>
							<xsd:documentation>y-location of this FreeStyleHtmlText</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="width" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation>
								Width of this FreeStyleHtmlText
								'type' must be rw:measureUnit or string represents in percentage of the usable width of the page (e.g. width="15500" or width="100%")
								such as you want to show a Text in Center of Page, 
								You can set width="100%", and specify align="center" in the HTML content.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="height" type="xsd:string" use="optional">
						<xsd:annotation>
							<xsd:documentation>
								Height of this FreeStyleHtmlText
								'type' must be rw:measureUnit or string represents in percentage of the usable height of the page (e.g. height="15500" or height="100%")
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="FreeStyleImage">
		<xsd:annotation>
			<xsd:documentation>Insert a Free Style Image into Free Style Page</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="x" type="rw:measureUnit" use="required">
				<xsd:annotation>
					<xsd:documentation>x-location of this FreeStyleHtmlText</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="y" type="rw:measureUnit" use="required">
				<xsd:annotation>
					<xsd:documentation>y-location of this FreeStyleHtmlText</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="filePath" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The absolute file path of the image. (The image will be embedded into .vpp)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- TableOfContents -->
	<xsd:element name="TableOfContents">
		<xsd:annotation>
			<xsd:documentation>Insert a Table of Content</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="maxLevel" type="xsd:positiveInteger" use="optional" default="3">
				<xsd:annotation>
					<xsd:documentation>Maximum level will be included in TOC.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="levelStyles" type="rw:strings" use="optional" default="Heading 1 (VP), Heading 2 (VP), Heading 3 (VP), Column header 1, Row caption 1">
				<xsd:annotation>
					<xsd:documentation>
						Ordered Styles will be included in TOC.
						e.g. 
						levelStyles="Heading1, Heading2, Heading3, Heading4, Heading5, Heading6"
						means
						Heading1..6 will be included in TOC.
						and since maxLevel=3, so, finally, only Heading1, Heading2, and Heading3 is shown.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="title" type="xsd:string" use="optional" default="Table of Contents">
				<xsd:annotation>
					<xsd:documentation>Title caption of the TOC.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="titleStyle" type="xsd:string" use="optional" default="TOC Title">
				<xsd:annotation>
					<xsd:documentation>Style of the title caption.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowStyles" type="rw:strings" use="optional" default="TOC Level 1, TOC Level 2, TOC Level 3, TOC Level 4, TOC Level 5">
				<xsd:annotation>
					<xsd:documentation>
						Style of TOC rows.
						e.g. 
						levelStyles="Heading1, Heading2, Heading3"
						rowStyles="BoldStyle, ItalicStyle, UnderlineStyle"
						(assume BoldStyle, ItalicStyle, UnderlineStyle are styles defined in the report)
						then 
						the Heading1's caption will be shown in BoldStyle
						the Heading2's caption will be shown in ItalicStyle
						the Heading3's caption will be shown in UnderlineStyle
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- Table -->
	<xsd:element name="TableBlock">
		<xsd:annotation>
			<xsd:documentation>Insert a Table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
					Width of table.
					'type' must be rw:measureUnit or string represents in percentage (e.g. tableWidth="15500" or tableWidth="100%")
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="firstColumnWidth" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated.
					The width of first column.
					the measureUnit is pixel.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Column(s)' width of the table.
					@colWidths is relative to @tableWidth. 
					For example,  tableWidth="15000" colWidths="10, 20, 70", finally the columns widths will be: 
					1500 (15000*10/(10+20+70))
					3000 (15000*20/(10+20+70))
					10500  (15000*70/(10+20+70))
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment"  use="optional" default="center">
				<xsd:annotation>
					<xsd:documentation>'Alignment' of table.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="generateHeaderOnNewPage" use="optional" default="unspecified">
				<xsd:annotation>
					<xsd:documentation>
					@Deprecated It support in Report Writer only (not in Report Composer).
					For Report Composer please use Report Option "Repeat Table Header"
					
					Generate the header (the first row of this table) again if this table is generated across multiple pages.
					If working on Report Writer, "unspecified" means "false".
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="unspecified"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TableRow">
		<xsd:annotation>
			<xsd:documentation>Insert a Row into the table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="height" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Height' of the row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="backgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the row.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TableCell">
		<xsd:annotation>
			<xsd:documentation>Insert a Cell into the row.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="topBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Top Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="bottomBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Bottom Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="leftBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Left Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rightBorderEnable" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Enable/Disable Right Border.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="color" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the cell.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="splitted" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>The cell will be 'split'?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="mergeColumns" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated. Replaced by @colspan.
					
					Zero base. mergeColumns="1" means this cell consumes the next column, same as colspan="2". 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colspan" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Colspan' of the cell.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowspan" type="xsd:integer" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Rowspan' of the cell.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Iteration, retrieve a list of values 
	(IterationBlock, ForEach, ForEachSimpleRelationship, ForEachEndRelationship, ForEachRelationshipEnd, ForEachSubDiagram, ForEachOwnerDiagram, ForEachDiagram)
	-->
	<xsd:element name="IterationBlock">
		<xsd:annotation>
			<xsd:documentation>
			Retrieve children from Project/ModelElement/Diagram/DiagramElement.
			If active source is Project or ModelElement, its children ModelElements will be retrieved.
			If active source is Diagram or DiagramElement, its children DiagramElements will be retrieved.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="elementType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="elementTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelTypes (Model's modelTypes or DiagramElement's shapeTypes).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="stereotypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by stereotypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="filterHidden" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Filter hidden children DiagramElements.
					For retrieving from Diagram/DiagramElement only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeConnector" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @includeConnectors.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeConnectors" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve Shape or Shape+Connector from Diagram?
					For retrieving from Diagram only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="byBounds" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve DiagramElement inside the Bounds.
					Sometimes, the parent shape "contains" another shape. But another shape is not child of the shape.
					e.g. BPGroup won't be parent of the shapes.
					Then, @byBounds can be used to retrieve those 'contained' diagram element.
					For retrieving from Diagram/DiagramElement only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="byBoundsInAllLevel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Same as @byBounds, but includes nested level's contained DiagramElements.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="allLevel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve all ModelElements of the project? Otherwise, only the "root level model elements (model elements have no parent model)" will be retrieved.
					For retrieving from Project only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Ignore the last 'break' on the last value of the loop.
					'Break' may be ParagraphBreak or StaticText. 
					
					May ignore StaticText because the StaticText.content may be "\n" or ", " that used as a delimiter.
					e.g. IterationBlock > modelElement.name + ", " 
					where, don't need append ", " on the last modelElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="breakString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Insert a string on every value of the loop. Besides the last value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Sort by following option (or combination of the options):
					name | modelType | property | followTree | businessProcessFlow
					
					e.g. 
					@sortBys="name" 
						means sort by name.
					@sortBys="modelType, name"
						means sort by modelType first, then sort by name if same modelType.
					@sortBys="modelType, property, name" @sortProperty="visibility"
						means sort by modelType first, then sort by visibility if same modelType, then sort by name if same modelType+same visibility.
					@sortBys="businessProcessFlow"" 
						sorting the BPD elements by the ordering in BPD (calculated by their ordering in sequence/message flow).
						ONLY AVIALABLE for sorting Diagram Elements in a BPD
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>If sort by 'property' on @sortBys, @sortProperty is required to specified sort by which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					If sort by property, @sortValues can be specified for sort by values of the property.
					
					e.g. 
					@sortBys="property" @sortProperty="visibility" @sortValues="public, protected, private"
						means 'public' model elements will be before 'protected' model elements, 'protected' will be before 'private'
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>If sort by property, @defaultPropertyValue can be specified for the default value of the model has no this property value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Sorting in descending order?
					
					The numbers of descendingSorts should be same as sortBys (N values in @sortBys, requires N values in @descendingSorts)
					e.g. 
					@sortBys="name, modelType" @descendingSorts="true, false"
						means sort by name will be descending, sort by modelType will be ascending.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="identifier" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEach">
		<xsd:annotation>
			<xsd:documentation>Retrieve ModelElements (value of the property) from ModelElement's property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Retrieve from which proprety.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="breakString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachSimpleRelationship">
		<xsd:annotation>
			<xsd:documentation>Retrieve SimpleRelationship from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationship by direction.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="all"/>
						<xsd:enumeration value="from"/>
						<xsd:enumeration value="to"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="breakString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachEndRelationship">
		<xsd:annotation>
			<xsd:documentation>Retrieve EndRelationship from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationship by direction.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="all"/>
						<xsd:enumeration value="from"/>
						<xsd:enumeration value="to"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="breakString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated, replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachRelationshipEnd">
		<xsd:annotation>
			<xsd:documentation>Retrieve RelationshipEnd from ModelElement, or Connector from DiagramElement</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType (Model's modelType or DiagramElement's shapeType).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Filter RelationshipEnds by modelType.
					where, modelType can be EndRelationship or RelationshipEnd's model type.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Filter relationship ends by modelTypes. If @modelType is defined, @modelTypes will be ignored.
					where, modelType can be EndRelationship or RelationshipEnd's model type.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="endPointer" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Filter relationship by direction.
					both = all, self = from, other = to
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="all"/>
						<xsd:enumeration value="from"/>
						<xsd:enumeration value="to"/>
						<xsd:enumeration value="both"/>
						<xsd:enumeration value="self"/>
						<xsd:enumeration value="other"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="breakString" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.breakString.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachSubDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve sub diagrams from ModelElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachOwnerDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve owner diagrams, which the ModelElement is shown on.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphyBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ForEachDiagram">
		<xsd:annotation>
			<xsd:documentation>Retrieve diagrams from Project.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagram by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="ignoreParagraphBreakForLastModel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.ignoreParagraphBreakForLastModel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBy" type="xsd:NMTOKEN" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortBys" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortBys.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortProperty.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="sortValues" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.sortValues.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultPropertyValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.defaultPropertyValue.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSort" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @descendingSort.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="descendingSorts" type="rw:booleans" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as IterationBlock.descendingSorts.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!--
	 Conditional, if condition not match, the template node(s) under the condition won't be executed.
	 (DefaultConditionChecker, ValueConditionChecker, HasChildElementChecker, HasMetaModelPropertyChecker, HasParentModelChecker, HasParentShapeChecker, HasRelationshipChecker, 
	 ReportOptionChecker, HasDiagramChecker, HasDiagramPropertyChecker, HasDiagramElementPropertyChecker)
	 -->
	<xsd:element name="DefaultConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Check property value equals to its default value.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="equalFlag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @flag.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the property value is default value.
					@flag=false
						means the nodes will be executed if the property value is not default value.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="propertyType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ValueConditionChecker">
		<xsd:annotation>
			<xsd:documentation>Check property value match with an expected value.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="propertyType" use="optional" default="string">
				<xsd:annotation>
					<xsd:documentation>What is the type of the property.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="string"/>
						<xsd:enumeration value="int"/>
						<xsd:enumeration value="boolean"/>
						<xsd:enumeration value="model"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="operator" use="optional" default="equals">
				<xsd:annotation>
					<xsd:documentation>
					"equal" is Deprecated. Replaced by "equals"
					"not equal" is Deprecated. Replaced by "not equals"
					
					"equals", "not equals" for string/int/boolean/model property
					"less than", "equals or less than", "greater than", "equals or greater than" for string/int property
					"like", "not like" for string property
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="equals"/>
						<xsd:enumeration value="EQUALS"/>
						<xsd:enumeration value="not equals"/>
						<xsd:enumeration value="NOT EQUALS"/>
						<xsd:enumeration value="less than"/>
						<xsd:enumeration value="LESS THEN"/>
						<xsd:enumeration value="equals or less than"/>
						<xsd:enumeration value="EQUALS OR LESS THAN"/>
						<xsd:enumeration value="greater than"/>
						<xsd:enumeration value="GREATER THAN"/>
						<xsd:enumeration value="equals or greater than"/>
						<xsd:enumeration value="EQUALS OR GREATER THAN"/>
						<xsd:enumeration value="like"/>
						<xsd:enumeration value="LIKE"/>
						<xsd:enumeration value="not like"/>
						<xsd:enumeration value="NOT LIKE"/>
						<xsd:enumeration value="equal"/>
						<xsd:enumeration value="EQUAL"/>
						<xsd:enumeration value="not equal"/>
						<xsd:enumeration value="NOT EQUAL"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="value" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>The expected value.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="caseSensitive" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Case sensitive/insensitive for string property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="id" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The ID of this ValueConditionChecker, it is used for HasChildElementChecker.valueConditionCheckerId.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasChildElementChecker">
		<xsd:annotation>
			<xsd:documentation>Checking have children ModelElements of ModelElement. Or children DiagramElements of DiagramElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the parent have children.
					@flag=false
						means the nodes will be executed if the parent have no children.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="elementTypes" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelTypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="stereotypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter children by stereotypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeConnector" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @includeConnectors.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeConnectors" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve Shape or Shape+Connector from Diagram?
					For retrieving from Diagram only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="filterHidden" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Don't include the hidden-shape</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="allLevel" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Retrieve all ModelElements of the project? Otherwise, only the "root level model elements (model elements have no parent model)" will be retrieved.
					For retrieving from Project only.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="valueConditionCheckerId" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The ValueConditionChecker's id. Used to find out that ValueConditionChecker to check with children. 
						If the NO any one of the children matching with that ValueConditionChecker, this HasChildElementChecker will become NOT match.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasMetaModelPropertyChecker">
		<xsd:annotation>
			<xsd:documentation>Checking does the property refer to a ModelElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the ModelElement.
					@flag=false
						means the nodes will be executed if property does not refer to the ModelElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>The expected value's name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasParentModelChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement, DiagramElement, or Diagram) have parent ModelElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have parent model element.
					@flag=false
						means the nodes will be executed if have no parent model element.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasParentShapeChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (DiagramElement) have parent DiagramElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have parent diagram element.
					@flag=false
						means the nodes will be executed if have no parent diagram element.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="shapeType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the shapeType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasRelationshipChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement or DiagramElement) have relationship (Relationship or Connector) or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if have relationship.
					@flag=false
						means the nodes will be executed if have no relationship.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter relationships by modelTypes. If @modelType is defined, @modelTypes will be ignored.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="direction" use="optional" default="all">
				<xsd:annotation>
					<xsd:documentation>
					self_begins, self_ends are Deprecated.
					self_begins = from
					self_ends = to
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="all"/>
						<xsd:enumeration value="from"/>
						<xsd:enumeration value="to"/>
						<xsd:enumeration value="self_begins"/>
						<xsd:enumeration value="self_ends"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ReportOptionChecker">
		<xsd:annotation>
			<xsd:documentation>Check the 'Report Option'.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="equalFlag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @flag.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the report option is true.
					@flag=false
						means the nodes will be executed if the report option is false.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="option" use="optional">
				<xsd:annotation>
					<xsd:documentation>Check on which option.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="basicInformationShowsDocumentation"/>
						<xsd:enumeration value="suppressDuplicatedDetails"/>
						<xsd:enumeration value="applyUserLanguage"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasDiagramChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (Project) have diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the project have diagram.
					@flag=false
						means the nodes will be executed if the project have no diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasSubDiagramChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement) have sub diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the model element have sub diagram.
					@flag=false
						means the nodes will be executed if the model element have no sub diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasOwnerDiagramsChecker">
		<xsd:annotation>
			<xsd:documentation>Check does active source (ModelElement) have owner diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the model element have owner diagram.
					@flag=false
						means the nodes will be executed if the model element have no owner diagram.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="diagramType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter diagrams by diagramType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasDiagramPropertyChecker">
		<xsd:annotation>
			<xsd:documentation>Checking does the property refer to a Diagram or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the DiagramElement.
					@flag=false
						means the nodes will be executed if property does not refer to the DiagramElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasDiagramElementPropertyChecker">
		<xsd:annotation>
			<xsd:documentation>Checking does the property refer to a DiagramElement or not.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if property refers to the DiagramElement.
					@flag=false
						means the nodes will be executed if property does not refer to the DiagramElement.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Check on which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Property, getting property value from model element
	(StringPropertyText, IntPropertyText, BooleanPropertyText, MetaModelElement, FromEnd, ToEnd, RelationshipEndEndRelationship, RelationshipEndOppositeEnd, ParentModel, ParentShape, DiagramProperty)
	-->
	<xsd:element name="StringPropertyText">
		<xsd:annotation>
			<xsd:documentation>Generate String value from property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="propertyText" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isHTML" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
					Deprecated. Replaced by @forcePlainText.
					
					Determine does the property value is HTML text.
					Now, it will be 'true' for documentation property. So, @isHTML is useless.
					If want to show plain text of documentation property, may set @forcePlainText=true.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Size' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontFamily" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Ignore the 'Font Family' of html value?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="forcePlainText" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Generate plain text if the value is in HTML?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="defaultValue" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Generate the 'default value' if @property is not found.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isItalic.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.fontFamily.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.fontSize.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.foreColor.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.numberingLevel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="indentation" type="xsd:double" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.indentation.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hyperlink" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.hyperlink.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="IntPropertyText">
		<xsd:annotation>
			<xsd:documentation>Generate int value from Integer property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="propertyText" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isHTML" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isIgnoreHTMLFontSize" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isItalic.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.fontSize.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.foreColor.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.numberingLevel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BooleanPropertyText">
		<xsd:annotation>
			<xsd:documentation>Generate boolean value from Boolean property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="propertyText" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isBold" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isBold.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="isItalic" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.isItalic.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontFamily" type="xsd:string" use="optional" default="Times New Roman">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.fontFamily.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="fontSize" type="xsd:integer" use="optional" default="12">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.fontSize.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="foreColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.foreColor.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="numberingLevel" type="xsd:short" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.numberingLevel.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="MetaModelElement">
		<xsd:annotation>
			<xsd:documentation>Change active source to ModelElement from ModelElement property.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="modelProperty" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="property" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="identifier" type="xsd:string" use="optional"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FromEnd">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'From' RelationshipEnd from EndRelationship. 
			Or change active source to 'From' Model from SimpleRelationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ToEnd">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to 'To' RelationshipEnd from EndRelationship. 
			Or change active source to 'To' Model from SimpleRelationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RelationshipEndEndRelationship">
		<xsd:annotation>
			<xsd:documentation>Change active source to EndRelationship from RelationshipEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RelationshipEndOppositeEnd">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Opposite' RelationshipEnd from RelationshipEnd.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramProperty">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to Diagram from property.
			
			e.g. 
			BPSubProcess.diagramId refer to its BPD (Business Process Diagram). 
			If active source is a BPSubProcess, using @property=diagramId can change active source to its BPD.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="DiagramElementProperty">
		<xsd:annotation>
			<xsd:documentation>
			Change active source to DiagramElement from property.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="property" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>Get value from which property.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ParentModel">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Parent' model element from ModelElement or Diagram.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ParentShape">
		<xsd:annotation>
			<xsd:documentation>Change active source to 'Parent' shape from DiagramElement or ModelElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="shapeType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Find the parent (or parent of parent, etc...) that match the modelType.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="OwnerDiagram">
		<xsd:annotation>
			<xsd:documentation>Change active source to parent diagram from DiagramElement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<!-- 
	Reference
	(Reference, ReferenceLink, HasReferenceChecker)
	
	NOTES: 
	May use the combination of Reference + HasReferenceChecker, to avoid 1 Model Element is generated into report more than 1 time.
	-->
	<xsd:element name="Reference">
		<xsd:annotation>
			<xsd:documentation>Insert a Reference into report.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
			</xsd:sequence>
			<xsd:attribute name="alwaysMake" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					If false. The Reference will be made if have ReferenceLink request for this Reference.
					Used to avoid useless (no one referenced) Reference is created in report. To avoid too many Reference created in report.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="idFormat" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					The unique id of a Reference.
					
					Use ${PropertyName} to allow the id contains the model's property value (e.g. name, id, etc..).
					e.g. 
					"${visibility} ${name}"
					then based on a class named "MyClass", with "public" visibility, 
					the id will be: "public MyClass".
					
					If not specify the idFormat, the model's Id will be set as the Reference Id.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ReferenceLink">
		<xsd:annotation>
			<xsd:documentation>Insert a Link connects to a Reference.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="idFormat" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					The unique id of the Reference. Please refer to Reference.idFormat.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasReferenceChecker">
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="flag" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>
					@flag=true
						means the nodes will be executed if the reference exists.
					@flag=false
						means the nodes will be executed if the reference does not exist.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="idFormat" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					The unique id of the Reference. Please refer to Reference.idFormat.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	
	<!--
	Others
	(
		ElementImage, 
		FlowOfEvents, FlowOfEventIterationBlock, HasFlowOfEvent, FlowOfEventIndent, TestingProcedureContainerIterationBlock, 
		BPProcedures, BPProcedureStepIterationBlock, HasBPProcedureStep, BPProcedureStepIndent, 
		TestPlans, TestPlanStepIterationBlock, TestPlanStepIndent, 
		MatrixDiagram, ChartDiagram, GridDiagram
	)
	-->
	<xsd:element name="ElementImage">
		<xsd:annotation>
			<xsd:documentation>Showing image of Diagram/DiagramElement, or icon for model type.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="imageType" use="optional" default="icon">
				<xsd:annotation>
					<xsd:documentation>
					"diagram" means show image for Diagram/DiagramElement.
					"icon" means show icon for the model type.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="diagram"/>
						<xsd:enumeration value="icon"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="type" use="optional" default="icon">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @imageType.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="diagram"/>
						<xsd:enumeration value="icon"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="imageFormat" use="optional" default="png">
				<xsd:annotation>
					<xsd:documentation>
					- for @imageType="diagram" only 
					Specify the 'format' of generated image. 
					PNG, JPG, WMF are supported. Default is PNG.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="png"/>
						<xsd:enumeration value="jpg"/>
						<xsd:enumeration value="wmf"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="alignment" use="optional" default="left">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.alignment.</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="left"/>
						<xsd:enumeration value="center"/>
						<xsd:enumeration value="right"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="style" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as StaticText.style.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="width" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Width' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="height" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Height' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="maxWidth" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Max Width' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="maxHeight" type="rw:measureUnit" use="optional">
				<xsd:annotation>
					<xsd:documentation>Specify 'Max Height' of the generated image.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="landscape" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Deprecated. Replaced by @rotate</xsd:documentation>
					<xsd:documentation>'Rotate' the generated image in 90 degree?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rotate" use="optional" default="none">
				<xsd:annotation>
					<xsd:documentation>Rotate the image to right (90 degree) or left (270 degree) </xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="none"/>
						<xsd:enumeration value="right"/>
						<xsd:enumeration value="left"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="keepWithPreviousInPDF" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Make sure the previous item will be shown in same page with this item. (Used for PDF Report only)</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEvents">
		<xsd:annotation>
			<xsd:documentation>Showing Flow Of Events for a Use Case.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="showProcedure" use="optional" default="follow model">
				<xsd:annotation>
					<xsd:documentation>Generate the Procedures and ExpectedResults columns of the FlowOfEvent?</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="follow model"/>
						<xsd:enumeration value="true"/>
						<xsd:enumeration value="false"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.colWidths.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of Flow of event?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter Flow of events by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEventIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve step/extension from Flow of Event (StepContainer). Based on UseCase's StepContainer.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="includeSteps" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Retrieve steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="includeExtensions" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Retrieve extensions?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasFlowOfEvent">
		<xsd:annotation>
			<xsd:documentation>
			Check Flow of Event (StepContainer) has any step/extension. Based on UseCase's StepContainer.
			
			e.g.
			To check FlowOfEvent
			 
			- have step only (no extension)
			@hasStep="true" @hasExtension="false"
			
			- have extension only (no step) (In fact. It is impossible, because extension belongs to step. No step, won't have extension)
			@hasStep="false" @hasExtension="true"
			 
			- have step or extension
			@hasStepOrExtension="true" 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="hasStep" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hasExtension" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has extension?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="hasStepOrExtension" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps or extensions?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="FlowOfEventIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of Flow of Event's step/extension.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab). </xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestingProcedureContainerIterationBlock">
		<xsd:annotation>
			<xsd:documentation>
			Retrieve Testing Procedure. Works with FlowOfEventIterationBlock to get different Procedure/Expected Result.
			Based on UseCase's StepContainer.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedures">
		<xsd:annotation>
			<xsd:documentation>Showing BPProcedures for a BPD's Task, SubProcess, etc...</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Shows borders between Rows.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Shows borders between Columns.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showName" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show the name of procedure?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Filter BPProcedures by name.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedureStepIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve steps from BPProcedure.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="HasBPProcedureStep">
		<xsd:annotation>
			<xsd:documentation>Check BPProcedure has any step/extension. Based on UseCase's StepContainer.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="hasStep" type="xsd:boolean" use="optional">
				<xsd:annotation>
					<xsd:documentation>Has steps?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="BPProcedureStepIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of BPProcedure's step.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlans">
		<xsd:annotation>
			<xsd:documentation>Showing Test Plans for a Requirement Diagram's Test Case</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showRowBorder" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>Show borders between Rows?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="showColumnBorder" type="xsd:boolean" use="optional" default="true">
				<xsd:annotation>
					<xsd:documentation>Show borders between Columns?</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlanStepIterationBlock">
		<xsd:annotation>
			<xsd:documentation>Retrieve steps from Test Plan.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="TestPlanStepIndent">
		<xsd:annotation>
			<xsd:documentation>Insert indent of Test Plan's step.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="indentText" type="xsd:string" use="optional" default="\t">
				<xsd:annotation>
					<xsd:documentation>Specify the 'text' as an indent. Default is \t (Tab).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="MatrixDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Matrix Diagram as table(s).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="DisplayOption" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Deprecated. (Only support in Report Writer. Not support in Report Composer) 
							
							How to display the model?
							For example:
								- showing Requirement "ID" for Requirement
								 modelType="Requirement" value="${requirementID}"
								 
								- showing Use Case "ID : Name" for Use Case
								 modelType="UseCase" value="${useCaseID} : ${name}"
								 
								- showing "Name (ModelType)" for others
								 value="${name} (${modelType})"
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="modelType" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>
									This display option showing for which model types. 
									If not specified, this display option will be a Default display option for all model types.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="value" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>
									How to display the model.
									Use ${PropertyName} to show the model's property value (e.g. name, id, etc...).
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Matrix diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore. 
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ChartDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Chart Diagram as table(s).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="DisplayOption" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Deprecated. (Only support in Report Writer. Not support in Report Composer)
							
							How to display the model?
							For example:
								- showing Requirement "ID" for Requirement
								 modelType="Requirement" value="${requirementID}"
								 
								- showing Use Case "ID : Name" for Use Case
								 modelType="UseCase" value="${useCaseID} : ${name}"
								 
								- showing "Name (ModelType)" for others
								 value="${name} (${modelType})"
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="modelType" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation>
									This display option showing for which model types. 
									If not specified, this display option will be a Default display option for all model types.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="value" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>
									How to display the model.
									Use ${PropertyName} to show the model's property value (e.g. name, id, etc...).
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Chart diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="GridDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Grid Diagram as table(s).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>same as TableBlock.tableWidth.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="colWidths" type="rw:integers" use="optional">
				<xsd:annotation>
					<xsd:documentation>
					Column(s)' width of the table.
					@colWidths is relative to @tableWidth. 
					For example,  tableWidth="15000" colWidths="10, 20, 70", finally the columns widths will be: 
					1500 (15000*10/(10+20+70))
					3000 (15000*20/(10+20+70))
					10500  (15000*70/(10+20+70))
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="rowBackgroundColors" type="rw:colors" use="optional">
				<xsd:annotation>
					<xsd:documentation>Background of Row(s). Also affect header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="headerRowBackgroundColor" type="rw:color" use="optional">
				<xsd:annotation>
					<xsd:documentation>'Background Color' of the header row (first row).</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="columnHeaders" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Column(s)' header o fthe table.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="RuleFamilyTable">
		<xsd:annotation>
			<xsd:documentation>Insert Rule Family Table.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="DecisionTableDiagram">
		<xsd:annotation>
			<xsd:documentation>Insert Decision Table.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="tableWidth" type="xsd:string" use="optional" default="100%">
				<xsd:annotation>
					<xsd:documentation>
						Deprecated. 
						Decision table diagram is shown in its exact width following that in the project, either in a single table or split into multiple tables when it is too long. 
						Therefore, tableWidth is no longer supported anymore.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:simpleType name="measureUnit">
		<xsd:annotation>
			<xsd:documentation>
			Measure unit of width/height (e.g. Table's width). 
			It is in 0.01mm. (e.g. 21000 = 210mm = width of A4 paper.)
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:int">
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="strings">
		<xsd:annotation>
			<xsd:documentation>Strings separated by ", ". e.g. "Class, UseCase, Actor" means "Class", "UseCase", "Actor"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="integers">
		<xsd:annotation>
			<xsd:documentation>Integers separated by ", ". e.g. "10, 20, 70"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="booleans">
		<xsd:annotation>
			<xsd:documentation>Booleans separated by ", ". e.g. "true, false, false"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="color">
		<xsd:annotation>
			<xsd:documentation>
			Color can be represented in following 2 forms:
			1. "R, G, B" in decimal, e.g. "230, 230, 230" (it is a light gray color)
			2. #FFFFFF (RGB in hexadecimal), e.g. #FF0000 (it is a red color)
			
			Prefer using #FFFFFF. Because "R, G, B" is not suitable for colors.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:simpleType name="colors">
		<xsd:annotation>
			<xsd:documentation>
			Colors separated by ", ". e.g. "#FF0000, #00FF00, #0000FF".
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string"/>
	</xsd:simpleType>
	
	<xsd:element name="Include">
		<xsd:annotation>
			<xsd:documentation>
			
			When inside 'Template', include a 'Sub Template'. 
			The content of the sub template will be generated.
			'Sub Template' must be placed in "Subtemplate/" folder.
			@template refer to a file inside "Subtemplate/" folder
			
			or 
			
			When inside 'CombinedTemplate', include a 'Template'.
			The content of the template will be generated.
			
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="template" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
					The name of the sub template.
					or 
					The relative path of template.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Subtemplate">
		<xsd:annotation>
			<xsd:documentation>The root element of sub template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="CombinedTemplate">
		<xsd:annotation>
			<xsd:documentation>The root element of combined template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:CombinedTemplateContent"/>
			</xsd:choice>
			<xsd:attribute name="id" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						The id of this template. It is used on Save/Load the template in report. 
						Please don't change id if this template have been used on any report. Otherwise, report may not able to find this template on loading.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="name" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:documentation>
						The name of the template that showing on template list.
						
						If the 'id' is not specified, this 'name' will be used as 'id'. 
						So, please don't change name if this template have been used on any report. Otherwise, report may not able to find this template on loading.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="default" type="xsd:boolean" use="optional" default="false">
				<xsd:annotation>
					<xsd:documentation>
						Determine this template is the default template of current folder (modelType/diagramType).
						Assume only one template will be 'default' in one folder.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="type" use="optional">
				<xsd:annotation>
					<xsd:documentation>Deprecated</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Loop">
		<xsd:annotation>
			<xsd:documentation>The root element of combined template.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice>
				<!-- any element after the comment "CONTENTS"-->
				<xsd:group minOccurs="0" maxOccurs="unbounded" ref="rw:AnyElements"/>
			</xsd:choice>
			<xsd:attribute name="type" use="optional">
				<xsd:annotation>
					<xsd:documentation>
						A specified 'type' of looping.
						Now, we only support "BusinessProcessFlowLoop"
						
						"BusinessProcessFlowLoop" will sort the BPD elements based on their flow order.
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:NMTOKEN">
						<xsd:enumeration value="BusinessProcessFlowLoop"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="modelTypes" type="rw:strings" use="optional">
				<xsd:annotation>
					<xsd:documentation>Loop the children by modelTypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="modelType" type="xsd:string" use="optional">
				<xsd:annotation>
					<xsd:documentation>Loop the children by modelType. If @modelTypes is also specified. This modelType will be included in modelTypes.</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:group name="AnyElements">
		<xsd:choice>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Template"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TemplateInformationHeader"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:ElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ProjectBaseInitiationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParagraphBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:PageBreak"/>
			<xsd:element maxOccurs="unbounded" ref="rw:StaticText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStylePage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleHtmlText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FreeStyleImage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableOfContents"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableRow"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TableCell"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEach"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSimpleRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachRelationshipEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachSubDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachOwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ForEachDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DefaultConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueConditionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasChildElementChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasMetaModelPropertyChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentModelChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasParentShapeChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasRelationshipChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ReportOptionChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasSubDiagramChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasOwnerDiagramsChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramPropertyChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasDiagramElementPropertyChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:StringPropertyText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:IntPropertyText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BooleanPropertyText"/>
			<xsd:element maxOccurs="unbounded" ref="rw:MetaModelElement"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FromEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ToEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndEndRelationship"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RelationshipEndOppositeEnd"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DiagramElementProperty"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentModel"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ParentShape"/>
			<xsd:element maxOccurs="unbounded" ref="rw:OwnerDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Reference"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ReferenceLink"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasReferenceChecker"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ElementImage"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEvents"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasFlowOfEvent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:FlowOfEventIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestingProcedureContainerIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedures"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:HasBPProcedureStep"/>
			<xsd:element maxOccurs="unbounded" ref="rw:BPProcedureStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlans"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIterationBlock"/>
			<xsd:element maxOccurs="unbounded" ref="rw:TestPlanStepIndent"/>
			<xsd:element maxOccurs="unbounded" ref="rw:MatrixDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ChartDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:GridDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:RuleFamilyTable"/>
			<xsd:element maxOccurs="unbounded" ref="rw:DecisionTableDiagram"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Include"/>
			<!-- 
			<xsd:element maxOccurs="unbounded" ref="rw:Subtemplate"/>
			<xsd:element maxOccurs="unbounded" ref="rw:CombinedTemplate"/>
			 -->
			<xsd:element maxOccurs="unbounded" ref="rw:Loop"/>
		</xsd:choice>
	</xsd:group>
	
	<xsd:group name="CombinedTemplateContent">
		<xsd:choice>
			<xsd:element maxOccurs="unbounded" ref="rw:Include"/>
			<xsd:element maxOccurs="unbounded" ref="rw:Loop"/>
			<xsd:element maxOccurs="unbounded" ref="rw:ValueConditionChecker"/>
		</xsd:choice>
	</xsd:group>
	
</xsd:schema>